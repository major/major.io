<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debian on Major Hayden ðŸ¤ </title><link>https://major.io/tags/debian/</link><description>Recent content in debian on Major Hayden ðŸ¤ </description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/" target="_blank" rel="noopener">CC BY-SA 2.0&lt;/a></copyright><lastBuildDate>Thu, 02 Nov 2017 15:00:25 +0000</lastBuildDate><atom:link href="https://major.io/tags/debian/index.xml" rel="self" type="application/rss+xml"/><item><title>Changes in RHEL 7 Security Technical Implementation Guide Version 1, Release 3</title><link>https://major.io/2017/11/02/changes-in-rhel-7-security-technical-implementation-guide-version-1-release-3/</link><pubDate>Thu, 02 Nov 2017 15:00:25 +0000</pubDate><guid>https://major.io/2017/11/02/changes-in-rhel-7-security-technical-implementation-guide-version-1-release-3/</guid><description>The latest release of the Red Hat Enterprise Linux Security Technical Implementation Guide (STIG) was published last week. This release is Version 1, Release 3, and it contains four main changes:
V-77819 - Multifactor authentication is required for graphical logins V-77821 - Datagram Congestion Control Protocol (DCCP) kernel module must be disabled V-77823 - Single user mode must require user authentication V-77825 - Address space layout randomization (ASLR) must be enabled Deep dive Let&amp;rsquo;s break down this list to understand what each one means.</description></item><item><title>Apply the STIG to even more operating systems with ansible-hardening</title><link>https://major.io/2017/07/21/apply-stig-operating-systems-ansible-hardening/</link><pubDate>Fri, 21 Jul 2017 17:38:46 +0000</pubDate><guid>https://major.io/2017/07/21/apply-stig-operating-systems-ansible-hardening/</guid><description>Tons of improvements made their way into the ansible-hardening role in preparation for the OpenStack Pike release next month. The role has a new name, new documentation and extra tests.
The role uses the Security Technical Implementation Guide (STIG) produced by the Defense Information Systems Agency (DISA) and applies the guidelines to Linux hosts using Ansible. Every control is configurable via simple Ansible variables and each control is thoroughly documented.</description></item><item><title>Enable AppArmor on a Debian Jessie cloud image</title><link>https://major.io/2017/05/24/enable-apparmor-on-a-debian-jessie-cloud-image/</link><pubDate>Wed, 24 May 2017 16:14:03 +0000</pubDate><guid>https://major.io/2017/05/24/enable-apparmor-on-a-debian-jessie-cloud-image/</guid><description>I merged some initial Debian support into the openstack-ansible-security role and ran into an issue enabling AppArmor. The apparmor service failed to start and I found this output in the system journal:
kernel: AppArmor: AppArmor disabled by boot time parameter Digging in That was unexpected. I was using the Debian jessie cloud image and it uses extlinux as the bootloader. The file didn&amp;rsquo;t reference AppArmor at all:
# cat /boot/extlinux/extlinux.conf default linux timeout 1 label linux kernel boot/vmlinuz-3.</description></item><item><title>What I learned while securing Ubuntu</title><link>https://major.io/2015/10/14/what-i-learned-while-securing-ubuntu/</link><pubDate>Wed, 14 Oct 2015 20:53:12 +0000</pubDate><guid>https://major.io/2015/10/14/what-i-learned-while-securing-ubuntu/</guid><description>The blog posts have slowed down a bit lately because I&amp;rsquo;ve been heads down on a security project at work. I&amp;rsquo;m working with people in the OpenStack community to create a new Ansible role called openstack-ansible-security. The role aims to improve host security by using hardening standards to improve the configuration of various parts of the operating system.
This means applying security hardening to Ubuntu 14.04 systems since that&amp;rsquo;s the only host operating system supported by openstack-ansible at the moment.</description></item><item><title>Install sysstat on Fedora 21</title><link>https://major.io/2014/12/12/install-sysstat-fedora-21/</link><pubDate>Fri, 12 Dec 2014 17:55:57 +0000</pubDate><guid>https://major.io/2014/12/12/install-sysstat-fedora-21/</guid><description>One of the first tools I learned about after working with Red Hat was sysstat. It can write down historical records about your server at regular intervals. This can help you diagnose CPU usage, RAM usage, or network usage problems. In addition, sysstat also provides some handy command line utilities like vmstat, iostat, and pidstat that give you a live view of what your system is doing.
On Debian-based systems (including Ubuntu), you install the sysstat package and enable it with a quick edit to /etc/default/sysstat and the cron job takes it from there.</description></item><item><title>Unexpected predictable network naming with systemd</title><link>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</link><pubDate>Wed, 06 Aug 2014 21:09:34 +0000</pubDate><guid>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</guid><description>While using a Dell R720 at work today, we stumbled upon a problem where the predictable network device naming with systemd gave us some unpredictable results. The server has four onboard network ports (two 10GbE and two 1GbE) and an add-on 10GbE card with two additional ports.
Running lspci gives this output:
# lspci | grep Eth 01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 08:00.</description></item><item><title>Adventures in live booting Linux distributions</title><link>https://major.io/2014/07/29/adventures-in-live-booting-linux-distributions/</link><pubDate>Tue, 29 Jul 2014 13:05:54 +0000</pubDate><guid>https://major.io/2014/07/29/adventures-in-live-booting-linux-distributions/</guid><description>We&amp;rsquo;re all familiar with live booting Linux distributions. Almost every Linux distribution under the sun has a method for making live CD&amp;rsquo;s, writing live USB sticks, or booting live images over the network. The primary use case for some distributions is on a live medium (like KNOPPIX).
However, I embarked on an adventure to look at live booting Linux for a different use case. Sure, many live environments are used for demonstrations or installations - temporary activities for a desktop or a laptop.</description></item><item><title>X11 forwarding request failed on channel 0</title><link>https://major.io/2014/07/24/x11-forwarding-request-failed-on-channel-0/</link><pubDate>Thu, 24 Jul 2014 19:24:32 +0000</pubDate><guid>https://major.io/2014/07/24/x11-forwarding-request-failed-on-channel-0/</guid><description>Forwarding X over ssh is normally fairly straightforward when you have the correct packages installed. I have another post about the errors that appear when you&amp;rsquo;re missing the xorg-x11-xauth (CentOS, Fedora, RHEL) or xauth (Debian, Ubuntu) packages.
Today&amp;rsquo;s error was a bit different. Each time I accessed a particular Debian server via ssh with X forwarding requested, I saw this:
$ ssh -YC myserver.example.com X11 forwarding request failed on channel 0 The xauth package was installed and I found a .</description></item><item><title>Install Debian packages without starting daemons</title><link>https://major.io/2014/06/26/install-debian-packages-without-starting-daemons/</link><pubDate>Thu, 26 Jun 2014 20:39:44 +0000</pubDate><guid>https://major.io/2014/06/26/install-debian-packages-without-starting-daemons/</guid><description>My work at Rackspace has involved working with a bunch of Debian chroots lately. One problem I had was that daemons tried to start in the chroot as soon as I installed them. That created errors and made my ansible output look terrible.
If you&amp;rsquo;d like to prevent daemons from starting after installing a package, just toss a few lines into /usr/sbin/policy-rc.d:
cat &amp;gt; /usr/sbin/policy-rc.d &amp;lt;&amp;lt; EOF #!/bin/sh echo &amp;#34;All runlevel operations denied by policy&amp;#34; &amp;gt;&amp;amp;2 exit 101 EOF Now, install any packages that you need and the daemons will remain stopped until you start them (or reboot the server).</description></item><item><title>Switching to systemd on Debian jessie</title><link>https://major.io/2014/05/20/switching-to-systemd-on-debian-jessie/</link><pubDate>Tue, 20 May 2014 13:47:33 +0000</pubDate><guid>https://major.io/2014/05/20/switching-to-systemd-on-debian-jessie/</guid><description>It seems like everyone is embracing systemd these days. It&amp;rsquo;s been in Fedora since 2011 and it&amp;rsquo;s already in the RHEL 7 release candidate. Arch Linux and Gentoo have it as well. Debian got on board with the jessie release (which is currently in testing).
Switching from old SysVinit to systemd in Debian jessie is quite simple. For the extremely cautious system administrators, you can follow Debian&amp;rsquo;s guide and test systemd before you make the full cutover.</description></item><item><title>Automatically loading iptables rules on Debian/Ubuntu</title><link>https://major.io/2009/11/16/automatically-loading-iptables-on-debianubuntu/</link><pubDate>Tue, 17 Nov 2009 04:39:52 +0000</pubDate><guid>https://major.io/2009/11/16/automatically-loading-iptables-on-debianubuntu/</guid><description>If you want your iptables rules automatically loaded every time your networking comes up on your Debian or Ubuntu server, you can follow these easy steps.
First, get your iptables rules set up the way you like them. Once you&amp;rsquo;ve verified that everything works, save the rules:
Next, open up /etc/network/if-up.d/iptables in your favorite text editor and add the following:
Once you save it, make it executable:
Now, the rules will be restored each time your networking scripts start (or restart).</description></item><item><title>Upgrade Debian etch to lenny</title><link>https://major.io/2009/02/18/upgrade-debian-etch-to-lenny/</link><pubDate>Wed, 18 Feb 2009 13:28:39 +0000</pubDate><guid>https://major.io/2009/02/18/upgrade-debian-etch-to-lenny/</guid><description>I&amp;rsquo;ve tested this Debian etch to lenny upgrade process a few times so far, and it seems to be working well.</description></item><item><title>New Linux security advisory Twitter bots</title><link>https://major.io/2009/02/05/new-linux-security-advisory-twitter-bots/</link><pubDate>Thu, 05 Feb 2009 17:00:03 +0000</pubDate><guid>https://major.io/2009/02/05/new-linux-security-advisory-twitter-bots/</guid><description>Thanks to the simplicity of ruby as well as the twitter and httparty gems, I&amp;rsquo;ve whipped up some Twitter bots today. The three bots will alert you when there are Red Hat, Ubuntu, or Debian security advisories. I&amp;rsquo;d set one up for Fedora, but their feed is broken today.
@redhaterrata - Red Hat Errata Updates
@ubuntusecurity - Ubuntu Security Notifications
@debiansecurity - Debian Security Advisories
As always, you can let me know if you have any suggestions for improvements, or other bots you&amp;rsquo;d like to see.</description></item></channel></rss>