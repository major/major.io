<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel on Major Hayden's Blog ðŸ¤ </title><link>https://major.io/tags/kernel/</link><description>Recent content in kernel on Major Hayden's Blog ðŸ¤ </description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 28 Feb 2018 13:53:48 +0000</lastBuildDate><atom:link href="https://major.io/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Install testing kernels in Fedora</title><link>https://major.io/2018/02/28/install-testing-kernels-in-fedora/</link><pubDate>Wed, 28 Feb 2018 13:53:48 +0000</pubDate><guid>https://major.io/2018/02/28/install-testing-kernels-in-fedora/</guid><description>If you&amp;rsquo;re on the latest Fedora release, you&amp;rsquo;re already running lots of modern packages. However, there are those times when you may want to help with testing efforts or try out a new feature in a newer package.
Most of my systems have the updates-testing repository enabled in one way or another. This repository contains packages that package maintainers have submitted to become the next stable package in Fedora. For example, if there is a bug fix for nginx, the package maintainer submits the changes and publish a release.</description></item><item><title>GRE tunnels with systemd-networkd</title><link>https://major.io/2015/10/16/gre-tunnels-with-systemd-networkd/</link><pubDate>Fri, 16 Oct 2015 23:54:52 +0000</pubDate><guid>https://major.io/2015/10/16/gre-tunnels-with-systemd-networkd/</guid><description>Switching to systemd-networkd for managing your networking interfaces makes things quite a bit simpler over standard networking scripts or NetworkManager. Aside from being easier to configure, it uses fewer resources on your system, which can be handy for smaller virtual machines or containers.
Managing tunnels between interfaces is also easier with systemd-networkd. This post will show you how to set up a GRE tunnel between two hosts running systemd-networkd.
Getting started You&amp;rsquo;ll need two hosts running a recent version of systemd-networkd.</description></item><item><title>Stumbling into the world of 4K displays [UPDATED]</title><link>https://major.io/2015/06/30/stumbling-into-the-world-of-4k-displays/</link><pubDate>Wed, 01 Jul 2015 04:33:43 +0000</pubDate><guid>https://major.io/2015/06/30/stumbling-into-the-world-of-4k-displays/</guid><description>Woot suckered me into buying a 4K display at a fairly decent price and now I have a Samsung U28D590D sitting on my desk at home. I ordered a mini-DisplayPort to DisplayPort from Amazon and it arrived just before the monitor hit my doorstep. It&amp;rsquo;s time to enter the world of 4K displays.
The unboxing of the monitor was fairly uneventful and it powered up after small amount of assembly. I plugged my mini-DP to DP cable into the monitor and then into my X1 Carbon 3rd gen.</description></item><item><title>Book Review: Linux Kernel Development</title><link>https://major.io/2015/06/21/book-review-linux-kernel-development/</link><pubDate>Sun, 21 Jun 2015 15:26:54 +0000</pubDate><guid>https://major.io/2015/06/21/book-review-linux-kernel-development/</guid><description>I picked up a copy of Robert Love&amp;rsquo;s book, Linux Kernel Development, earlier this year and I&amp;rsquo;ve worked my way through it over the past several weeks. A few people recommended the book to me on Twitter and I&amp;rsquo;m so glad they did. This book totally changed how I look at a system running Linux.
You must be this tall to ride this ride I&amp;rsquo;ve never had formal education in computer science or software development in the past.</description></item><item><title>Keep old kernels with yum and dnf</title><link>https://major.io/2015/05/18/keep-old-kernels-with-yum-and-dnf/</link><pubDate>Mon, 18 May 2015 14:22:56 +0000</pubDate><guid>https://major.io/2015/05/18/keep-old-kernels-with-yum-and-dnf/</guid><description>When you upgrade packages on Red Hat, CentOS and Fedora systems, the newer package replaces the older package. That means that files managed by RPM from the old package are removed and replaced with files from the newer package.
There&amp;rsquo;s one exception here: kernel packages.
Upgrading a kernel package with yum and dnf leaves the older kernel package on the system just in case you need it again. This is handy if the new kernel introduces a bug on your system or if you need to work through a compile of a custom kernel module.</description></item><item><title>Review: Lenovo X1 Carbon 3rd generation and Linux</title><link>https://major.io/2015/03/30/review-lenovo-x1-carbon-3rd-generation-and-linux/</link><pubDate>Mon, 30 Mar 2015 14:15:52 +0000</pubDate><guid>https://major.io/2015/03/30/review-lenovo-x1-carbon-3rd-generation-and-linux/</guid><description>&lt;p>&lt;img src="https://major.io/wp-content/uploads/2015/03/ThinkPad-Carbon-X1.jpg" alt="1">&lt;/p>
&lt;p>After a &lt;a href="../../2015/02/03/linux-support-dell-xps-13-9343-2015-model/">boatload of challenges&lt;/a> with what I thought would be my favorite Linux laptop, the &lt;a href="http://www.dell.com/us/p/xps-13-9343-laptop/pd">Dell XPS 13 9343&lt;/a>, I decided to take the plunge on a new &lt;a href="http://shop.lenovo.com/us/en/laptops/thinkpad/x-series/x1-carbon/">Lenovo X1 Carbon (3rd gen)&lt;/a>. My late-2013 MacBook Pro Retina (MacbookPro11,1) had plenty of quirks when running Linux and I was eager to find a better platform.&lt;/p></description></item><item><title>Lessons learned from a kernel bisection</title><link>https://major.io/2015/02/09/lessons-learned-kernel-bisection/</link><pubDate>Mon, 09 Feb 2015 14:39:08 +0000</pubDate><guid>https://major.io/2015/02/09/lessons-learned-kernel-bisection/</guid><description>[][1]I&amp;rsquo;m far from being a kernel developer, but I found myself staring down a [peculiar touchpad problem][2] with my new Dell XPS 13. Before kernel 3.17, the touchpad showed up as a standard PS/2 mouse, which certainly wasn&amp;rsquo;t ideal. That robbed the pad of its multi-touch capabilities. Kernel 3.17 added the right support for the pad but freezes began to occur somewhere between 3.17 and 3.19.
Bisecting It became apparent that bisecting the kernel would be required.</description></item><item><title>Moving from OS X to Linux: Day One</title><link>https://major.io/2013/08/26/moving-from-os-x-to-linux-day-one/</link><pubDate>Tue, 27 Aug 2013 03:05:46 +0000</pubDate><guid>https://major.io/2013/08/26/moving-from-os-x-to-linux-day-one/</guid><description>The thought of using Linux as a manager in a highly Windows- and Mac-centric corporate environment isn&amp;rsquo;t something to be taken lightly. Integrating with Active Directory, wrangling email with Microsoft Exchange, and taming quirky Microsoft office documents can be a challenge even with a well-equipped Mac. I decided to make a change after using a Mac at Rackspace for six years.
Let&amp;rsquo;s get one thing straight: I&amp;rsquo;m not a Windows or Mac basher.</description></item><item><title>Installing the Xen hypervisor on Fedora 19</title><link>https://major.io/2013/06/02/installing-the-xen-hypervisor-on-fedora-19/</link><pubDate>Mon, 03 Jun 2013 04:27:43 +0000</pubDate><guid>https://major.io/2013/06/02/installing-the-xen-hypervisor-on-fedora-19/</guid><description>It&amp;rsquo;s been a little while since I last posted about installing Xen on Fedora, so I figured that Fedora 19&amp;rsquo;s beta release was as good a time as any to write a new post. To get started, you&amp;rsquo;ll need to get Fedora 19 installed on your favorite hardware (or virtual machine).
Install the Xen hypervisor and tools. Also, ensure that both of the necessary daemons are running on each boot:</description></item><item><title>Xen 4.1 on Fedora 15 with Linux 3.0</title><link>https://major.io/2011/08/05/xen-4-1-on-fedora-15-with-linux-3-0/</link><pubDate>Sat, 06 Aug 2011 04:34:06 +0000</pubDate><guid>https://major.io/2011/08/05/xen-4-1-on-fedora-15-with-linux-3-0/</guid><description>If you haven&amp;rsquo;t noticed already, full Xen dom0 support was added in the Linux 3.0 kernel. This means there&amp;rsquo;s no longer a need to drag patches forward from old kernels and work from special branches and git repositories when building a kernel for dom0.
Something else you might not have noticed is that the Fedora kernel team has quietly slipped Linux 3.0 into Fedora 15&amp;rsquo;s update channels in disguise. Click that link, scroll down, and you&amp;rsquo;ll see â€œRebase to 3.</description></item><item><title>Keep all old kernels when upgrading via yum</title><link>https://major.io/2011/06/16/keep-all-old-kernels-when-upgrading-via-yum/</link><pubDate>Thu, 16 Jun 2011 12:50:46 +0000</pubDate><guid>https://major.io/2011/06/16/keep-all-old-kernels-when-upgrading-via-yum/</guid><description>Some might call me paranoid, but I get nervous when my package manager automatically removes a kernel. I logged into my Fedora 15 VM this morning and found this:
================================================================================ Package Arch Version Repository Size ================================================================================ Installing: kernel x86_64 2.6.35.13-92.fc14 updates 22 M Removing: kernel x86_64 2.6.35.11-83.fc14 @updates 104 M Transaction Summary ================================================================================ Install 1 Package(s) Remove 1 Package(s) Fedora 15&amp;rsquo;s default behavior is to keep three kernels: the latest one and the two previous versions.</description></item><item><title>Tap into your Linux system with SystemTap</title><link>https://major.io/2010/12/07/tap-into-your-linux-system-with-systemtap/</link><pubDate>Wed, 08 Dec 2010 02:27:02 +0000</pubDate><guid>https://major.io/2010/12/07/tap-into-your-linux-system-with-systemtap/</guid><description>One of the most interesting topics I&amp;rsquo;ve seen so far during my RHCA training at Rackspace this week is SystemTap. In short, SystemTap allows you to dig out a bunch of details about your running system relatively easily. It takes scripts, converts them to C, builds a kernel module, and then runs the code within your script.
HOLD IT:The steps below are definitely not meant for those who are new to Linux.</description></item><item><title>Keep web servers in sync with DRBD and OCFS2</title><link>https://major.io/2010/12/02/keep-web-servers-in-sync-with-drbd-and-ocfs2/</link><pubDate>Fri, 03 Dec 2010 02:01:12 +0000</pubDate><guid>https://major.io/2010/12/02/keep-web-servers-in-sync-with-drbd-and-ocfs2/</guid><description>The guide to redundant cloud hosting that I wrote recently will need some adjustments as I&amp;rsquo;ve fallen hard for the performance and reliability of DRBD and OCFS2. As a few of my sites were gaining in popularity, I noticed that GlusterFS simply couldn&amp;rsquo;t keep up. High I/O latency and broken replication threw a wrench into my love affair with GlusterFS and I knew there had to be a better option.</description></item><item><title>Legacy tty1 and block device support for Xen guests with pvops kernels</title><link>https://major.io/2010/05/14/legacy-tty1-and-block-device-support-for-xen-guests-with-pvops-kernels/</link><pubDate>Fri, 14 May 2010 13:24:34 +0000</pubDate><guid>https://major.io/2010/05/14/legacy-tty1-and-block-device-support-for-xen-guests-with-pvops-kernels/</guid><description>The discussions about the paravirt_ops, or &amp;ldquo;pvops&amp;rdquo;, support in upstream kernels at Xen Summit 2010 last month really piqued my interest.
Quite a few distribution maintainers have gone to great lengths to keep Xen domU support in their kernels and it&amp;rsquo;s been an uphill battle. Some kernels, such as Ubuntu&amp;rsquo;s linux-ec2 kernels, have patches from 2.6.18 dragged forward into 2.6.32 and even 2.6.33. It certainly can&amp;rsquo;t be enjoyable to keep dragging those patches forward into new kernel trees.</description></item><item><title>A New Year System Administrator Inspiration</title><link>https://major.io/2010/01/03/a-new-year-system-administrator-inspiration/</link><pubDate>Mon, 04 Jan 2010 02:53:53 +0000</pubDate><guid>https://major.io/2010/01/03/a-new-year-system-administrator-inspiration/</guid><description>Happy New Year! I certainly hope it&amp;rsquo;s a great one for you, your family, and your business. As the new year begins, I figured it would be a good time to sit down and answer a question that I hear very often:
How do I become a better systems administrator?
The best way to become a better systems administrator is to fully understand the theory of what&amp;rsquo;s happening in your server&amp;rsquo;s environment.</description></item><item><title>Parse kernel.org changelogs with wget and grep</title><link>https://major.io/2009/12/15/parse-kernel-org-changelogs-with-wget-and-grep/</link><pubDate>Tue, 15 Dec 2009 23:14:47 +0000</pubDate><guid>https://major.io/2009/12/15/parse-kernel-org-changelogs-with-wget-and-grep/</guid><description>I try to keep up with the latest kernel update from kernel.org, but parsing through the output can be a pain if there are a lot of changes taking place. Here&amp;rsquo;s a handy one-liner to make it easier to read:
wget --quiet -O - http://www.kernel.org/pub/linux/kernel/v2.6/ChangeLog-2.6.31.8 | grep -A 4 ^commit | grep -B 1 &amp;quot;^--&amp;quot; | grep -v &amp;quot;^--&amp;quot; It should give you some output like this:
Linux 2.6.31.8 ext4: Fix potential fiemap deadlock (mmap_sem vs.</description></item><item><title>Fedora 11 httpd: alloc_listener: failed to get a socket for (null)</title><link>https://major.io/2009/08/14/fedora-11-httpd-alloc_listener-failed-to-get-a-socket-for-null/</link><pubDate>Fri, 14 Aug 2009 17:14:02 +0000</pubDate><guid>https://major.io/2009/08/14/fedora-11-httpd-alloc_listener-failed-to-get-a-socket-for-null/</guid><description>If you use Fedora 11 in a virtualized environment, you may have seen this error recently if you&amp;rsquo;ve updated to apr-1.3.8-1:
The issue is related to three kernel calls that are used in apr-1.3.8-1: accept4(), dup3() and epoll_create1(). Without these calls, apache is unable to start.
Update on August 17, 2009:the Fedora team has pushed apr-1.3.8-2 into the stable repositories for Fedora 11, which eliminates the need for the temporary fix shown below.</description></item><item><title>Two great signals: SIGSTOP and SIGCONT</title><link>https://major.io/2009/06/15/two-great-signals-sigstop-and-sigcont/</link><pubDate>Mon, 15 Jun 2009 18:16:19 +0000</pubDate><guid>https://major.io/2009/06/15/two-great-signals-sigstop-and-sigcont/</guid><description>The best uses I&amp;rsquo;ve found for the SIGSTOP and SIGCONT signals are times when a process goes haywire, or when a script spawns too many processes at once.
You can issue the signals like this:
kill -SIGSTOP [pid] kill -SIGCONT [pid] Wikipedia has great definitions for SIGSTOP:
When SIGSTOP is sent to a process, the usual behaviour is to pause that process in its current state. The process will only resume execution if it is sent the SIGCONT signal.</description></item><item><title>Linux: emergency reboot or shutdown with magic commands</title><link>https://major.io/2009/01/29/linux-emergency-reboot-or-shutdown-with-magic-commands/</link><pubDate>Fri, 30 Jan 2009 02:07:06 +0000</pubDate><guid>https://major.io/2009/01/29/linux-emergency-reboot-or-shutdown-with-magic-commands/</guid><description>Most linux distributions use some type of mechanism to gracefully stop daemons and unmount storage volumes during a reboot or shutdown. It&amp;rsquo;s most commonly done via scripts that will wait for each daemon to shut down gracefully before proceeding to the next daemon.
As we know, sometimes servers misbehave due to things put them through, and you can quickly end up in a situation where things are going badly. I&amp;rsquo;m talking about the type of situation where you&amp;rsquo;re connected via SSH to a server that controls phone lines for five million people and it sits in a tiny building 400 miles away from the nearest human being.</description></item><item><title>Linux: Adjust storage kernel module load order</title><link>https://major.io/2009/01/26/linux-adjust-storage-kernel-module-load-order/</link><pubDate>Mon, 26 Jan 2009 20:40:01 +0000</pubDate><guid>https://major.io/2009/01/26/linux-adjust-storage-kernel-module-load-order/</guid><description>I set up a system at home that has two SATA controllers: one is on the motherboard (nvidia chipset), while the other is on a Silicon Image SATA card that has three eSATA ports. Here is the relevant lspci output:
There are two primary drives connected to the onboard controller and four connected to the controller card. One of the primary drives on the onboard controller contains the operating system (Ubuntu, in this case), while the other drive is blank.</description></item><item><title>Reducing inode and dentry caches to keep OOM killer at bay</title><link>https://major.io/2008/12/03/reducing-inode-and-dentry-caches-to-keep-oom-killer-at-bay/</link><pubDate>Thu, 04 Dec 2008 00:44:20 +0000</pubDate><guid>https://major.io/2008/12/03/reducing-inode-and-dentry-caches-to-keep-oom-killer-at-bay/</guid><description>When it comes to frustrating parts of the Linux kernel, OOM killer takes the cake. If it finds that applications are using too much memory on the server, it will kill process abruptly to free up memory for the system to use. I spent much of this week wrestling with a server that was in the clutches of OOM killer.
There are a few processes on the server that keep it fairly busy.</description></item><item><title>Reduce disk I/O for small reads using memory</title><link>https://major.io/2008/08/07/reduce-disk-io-for-small-reads-using-memory/</link><pubDate>Thu, 07 Aug 2008 17:00:27 +0000</pubDate><guid>https://major.io/2008/08/07/reduce-disk-io-for-small-reads-using-memory/</guid><description>Many applications that are used on a standard server perform quite a few of small writes to the disk (like MySQL or Apache). These writes can pile up and limit the performance of your applications. If you have kernel 2.6.9 or later, you can adjust how these small writes are handled to allow for better performance.
There&amp;rsquo;s two main kernel variables to know:
vm.dirty_ratio - The highest % of your memory that can be used to hold dirty data.</description></item><item><title>Rebuilding the initial ram disk (initrd)</title><link>https://major.io/2008/01/28/rebuilding-the-initial-ram-disk-initrd/</link><pubDate>Mon, 28 Jan 2008 18:23:39 +0000</pubDate><guid>https://major.io/2008/01/28/rebuilding-the-initial-ram-disk-initrd/</guid><description>Installing new hardware may mean that new kernel need to be loaded when your server boots up. There&amp;rsquo;s a two step process to making a new initrd file:
First, add the appropriate line to your /etc/modules.conf or /etc/modprobe.conf which corresponds to your new kernel module.
Next, rebuild the initial ram disk after making a backup of the current one:
# cp /boot/initrd-`uname -r`.img /boot/initrd-`uname -r`.img.bak # mkinitrd -f initrd-`uname -r`.img `uname -r` Reboot the server now and make sure the new driver is loaded properly.</description></item><item><title>ip_conntrack: table full, dropping packet</title><link>https://major.io/2008/01/24/ip_conntrack-table-full-dropping-packet/</link><pubDate>Thu, 24 Jan 2008 18:26:40 +0000</pubDate><guid>https://major.io/2008/01/24/ip_conntrack-table-full-dropping-packet/</guid><description>Using Linux kernel 3.12 or later? See this updated post instead.
Last week, I found myself with a server under low load, but it couldn&amp;rsquo;t make or receive network connections. When I ran dmesg, I found the following line repeating over and over:
I&amp;rsquo;d seen this message before, but I headed over to Red Hat&amp;rsquo;s site for more details. It turns out that the server was running iptables, but it was under a very heavy load and also handling a high volume of network connections.</description></item></channel></rss>