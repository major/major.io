<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Major Hayden's Blog ðŸ¤ </title><link>https://major.io/tags/git/</link><description>Recent content in git on Major Hayden's Blog ðŸ¤ </description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 09 Feb 2015 14:39:08 +0000</lastBuildDate><atom:link href="https://major.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Lessons learned from a kernel bisection</title><link>https://major.io/2015/02/09/lessons-learned-kernel-bisection/</link><pubDate>Mon, 09 Feb 2015 14:39:08 +0000</pubDate><guid>https://major.io/2015/02/09/lessons-learned-kernel-bisection/</guid><description>[][1]I&amp;rsquo;m far from being a kernel developer, but I found myself staring down a [peculiar touchpad problem][2] with my new Dell XPS 13. Before kernel 3.17, the touchpad showed up as a standard PS/2 mouse, which certainly wasn&amp;rsquo;t ideal. That robbed the pad of its multi-touch capabilities. Kernel 3.17 added the right support for the pad but freezes began to occur somewhere between 3.17 and 3.19.
Bisecting It became apparent that bisecting the kernel would be required.</description></item><item><title>Using git clean to remove subdirectories containing git repositories</title><link>https://major.io/2012/10/24/using-git-clean-to-remove-subdirectories-containing-git-repositories/</link><pubDate>Wed, 24 Oct 2012 20:44:59 +0000</pubDate><guid>https://major.io/2012/10/24/using-git-clean-to-remove-subdirectories-containing-git-repositories/</guid><description>I had a peculiar situation today where I cloned a repository into a directory which was inside another repository. Here&amp;rsquo;s what I was doing:
$ git clone git://gitserver/repo1.git repo1 $ cd repo1 $ git clone git://gitserver/repo2.git repo2 $ git clean -fxd Removing repo2/ $ ls -d repo2 repo2 The second repository existed even after a git clean -fxd. I stumbled upon a GitHub page within the capistrano project that explained the problem - an extra -f was required:</description></item><item><title>DNS Service Review: Luadns</title><link>https://major.io/2012/07/22/dns-service-review-luadns/</link><pubDate>Sun, 22 Jul 2012 20:31:16 +0000</pubDate><guid>https://major.io/2012/07/22/dns-service-review-luadns/</guid><description>Vitalie Cherpec contacted me back in May about his new hosted DNS offering, Luadns. I gave it a try and I offered to write a review about the service.
DISCLAIMER: I don&amp;rsquo;t write many reviews on this blog, but I want to make sure a few things are clear. Vitalie was kind enough to set up an account for me to test with which would have normally cost me $9/month. However, he didn&amp;rsquo;t give me any compensation of any kind for the review itself and there was nothing done for me outside of what a customer would receive at a paid service level at Luadns.</description></item><item><title>Compare commits between two git branches</title><link>https://major.io/2012/03/15/compare-commits-between-two-git-branches/</link><pubDate>Thu, 15 Mar 2012 15:00:24 +0000</pubDate><guid>https://major.io/2012/03/15/compare-commits-between-two-git-branches/</guid><description>I found myself stuck in a particularly nasty situation a few weeks ago where I had two git branches with some commits that were mixed up. Some commits destined for a branch called development ended up in master. To make matters worse, development was rebased on top of master and the history was obviously mangled.
My goal was to find out which commits existed in development but didn&amp;rsquo;t exist anywhere in master.</description></item><item><title>OpenStack bleeding-edge Python packages are now available</title><link>https://major.io/2012/02/01/openstack-bleeding-edge-python-packages-are-now-available/</link><pubDate>Wed, 01 Feb 2012 15:05:16 +0000</pubDate><guid>https://major.io/2012/02/01/openstack-bleeding-edge-python-packages-are-now-available/</guid><description>I sometimes enjoy living on the edge occasionally and that sometimes means I keep up with OpenStack changes commit by commit. If you&amp;rsquo;re in the same boat as I am, you may save some time by using my repository of bleeding-edge Python packages from the OpenStack projects:
pypi.mhtx.net Python packages are updated moments after the commit is merged into the repositories under OpenStack&amp;rsquo;s github account.
Although the packages will contain the latest code available, rest assured that the code has passed an initial code review (by humans), unit tests, and varying levels of functional or integrated testing.</description></item></channel></rss>