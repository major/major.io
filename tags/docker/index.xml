<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Major Hayden ðŸ¤ </title><link>https://major.io/tags/docker/</link><description>Recent content in docker on Major Hayden ðŸ¤ </description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/" target="_blank" rel="noopener">CC BY-SA 2.0&lt;/a></copyright><lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://major.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Build containers in GitLab CI with buildah</title><link>https://major.io/2019/05/24/build-containers-in-gitlab-ci-with-buildah/</link><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><guid>https://major.io/2019/05/24/build-containers-in-gitlab-ci-with-buildah/</guid><description>My team at Red Hat depends heavily on GitLab CI and we build containers often to run all kinds of tests. Fortunately, GitLab offers up CI to build containers and a container registry in every repository to hold the containers we build.
This is really handy because it keeps everything together in one place: your container build scripts, your container build infrastructure, and the registry that holds your containers. Better yet, you can put multiple types of containers underneath a single git repository if you need to build containers based on different Linux distributions.</description></item><item><title>Running Home Assistant in a Docker container with a Z-Wave USB stick</title><link>https://major.io/2019/01/14/running-home-assistant-in-a-docker-container-with-zwave-usb-stick/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://major.io/2019/01/14/running-home-assistant-in-a-docker-container-with-zwave-usb-stick/</guid><description>The Home Assistant project provides a great open source way to get started with home automtion that can be entirely self-contained within your home. It already has plenty of integrations with external services, but it can also monitor Z-Wave devices at your home or office.
Here are my devices:
Monoprice Z-Wave Garade Door Sensor Aeotec Z-Stick Gen5 (ZW090) Fedora Linux server with Docker installed Install the Z-Wave stick Start by plugging the Z-Stick into your Linux server.</description></item><item><title>Research Paper: Securing Linux Containers</title><link>https://major.io/2015/08/14/research-paper-securing-linux-containers/</link><pubDate>Fri, 14 Aug 2015 20:45:50 +0000</pubDate><guid>https://major.io/2015/08/14/research-paper-securing-linux-containers/</guid><description>It seems like there&amp;rsquo;s a new way to run containers every week. The advantages and drawbacks of each approach are argued about on mailing lists, in IRC channels, and in person, around the world. However, the largest amount of confusion seems to be around security.
Launching secure containers I&amp;rsquo;ve written about launching secure containers on this blog many times before:
Launch secure LXC containers on Fedora 20 using SELinux and sVirt Improving LXC template security Try out LXC with an Ansible playbook CoreOS vs.</description></item><item><title>CoreOS vs. Project Atomic: A Review</title><link>https://major.io/2014/05/13/coreos-vs-project-atomic-a-review/</link><pubDate>Wed, 14 May 2014 03:57:55 +0000</pubDate><guid>https://major.io/2014/05/13/coreos-vs-project-atomic-a-review/</guid><description>This post hasn&amp;rsquo;t been updated in quite some time.Many of these comparisons still hold true but some don&amp;rsquo;t. Updating this post is on my list of to-do&amp;rsquo;s. - MH 2015-04-25
You&amp;rsquo;ve probably been living under a rock if you haven&amp;rsquo;t heard about Docker. It simplifies the deployment and management of Linux containers better than anything else I&amp;rsquo;ve seen so far. Many ecosystems are growing with Docker at the core and two of the most popular hosting platforms for Docker are CoreOS and Project Atomic.</description></item><item><title>Configure static IP addresses for Project Atomicâ€™s KVM image</title><link>https://major.io/2014/04/23/configure-static-ip-addresses-for-project-atomics-kvm-image/</link><pubDate>Wed, 23 Apr 2014 15:14:39 +0000</pubDate><guid>https://major.io/2014/04/23/configure-static-ip-addresses-for-project-atomics-kvm-image/</guid><description>Amid all of the Docker buzz at the Red Hat Summit, Project Atomic was launched. It&amp;rsquo;s a minimalistic Fedora 20 image with a few tweaks, including rpm-ostree and geard.
There are great instructions on the site for firing up a test instance under KVM but my test server doesn&amp;rsquo;t have a DHCP server on its network. You can use Project Atomic with static IP addresses fairly easily:
Create a one-line /etc/sysconfig/network:</description></item><item><title>Docker, trusted builds, and Fedora 20</title><link>https://major.io/2014/03/26/docker-trusted-builds-and-fedora-20/</link><pubDate>Wed, 26 Mar 2014 05:17:58 +0000</pubDate><guid>https://major.io/2014/03/26/docker-trusted-builds-and-fedora-20/</guid><description>Docker is a hot topic in the Linux world at the moment and I decided to try out the new trusted build process. Long story short, you put your Dockerfile along with any additional content into your GitHub repository, link your GitHub account with Docker, and then fire off a build. The Docker index labels it as &amp;ldquo;trusted&amp;rdquo; since it was build from source files in your repository.
I set off to build a Dockerfile to provision a container that would run all of the icanhazip services.</description></item></channel></rss>