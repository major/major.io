<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>systemd on Major Hayden ðŸ¤ </title><link>https://major.io/tags/systemd/</link><description>Recent content in systemd on Major Hayden ðŸ¤ </description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/" target="_blank" rel="noopener">CC BY-SA 2.0&lt;/a></copyright><lastBuildDate>Fri, 15 Dec 2017 21:18:37 +0000</lastBuildDate><atom:link href="https://major.io/tags/systemd/index.xml" rel="self" type="application/rss+xml"/><item><title>Ensuring keepalived starts after the network is ready</title><link>https://major.io/2017/12/15/ensuring-keepalived-starts-network-ready/</link><pubDate>Fri, 15 Dec 2017 21:18:37 +0000</pubDate><guid>https://major.io/2017/12/15/ensuring-keepalived-starts-network-ready/</guid><description>After a recent OpenStack-Ansible (OSA) deployment on CentOS, I found that keepalived was not starting properly at boot time:
Keepalived_vrrp[801]: Cant find interface br-mgmt for vrrp_instance internal !!! Keepalived_vrrp[801]: Truncating auth_pass to 8 characters Keepalived_vrrp[801]: VRRP is trying to assign ip address 172.29.236.11/32 to unknown br-mgmt interface !!! go out and fix your conf !!! Keepalived_vrrp[801]: Cant find interface br-mgmt for vrrp_instance external !!! Keepalived_vrrp[801]: Truncating auth_pass to 8 characters Keepalived_vrrp[801]: VRRP is trying to assign ip address 192.</description></item><item><title>OpenStack-Ansible networking on CentOS 7 with systemd-networkd</title><link>https://major.io/2017/04/13/openstack-ansible-on-centos-7-with-systemd-networkd/</link><pubDate>Thu, 13 Apr 2017 13:18:09 +0000</pubDate><guid>https://major.io/2017/04/13/openstack-ansible-on-centos-7-with-systemd-networkd/</guid><description>Although OpenStack-Ansible doesn&amp;rsquo;t fully support CentOS 7 yet, the support is almost ready. I have a four node Ocata cloud deployed on CentOS 7, but I decided to change things around a bit and use systemd-networkd instead of NetworkManager or the old rc scripts.
This post will explain how to configure the network for an OpenStack-Ansible cloud on CentOS 7 with systemd-networkd.
Each one of my OpenStack hosts has four network interfaces and each one has a specific task:</description></item><item><title>systemd-networkd on Ubuntu 16.04 LTS (Xenial)</title><link>https://major.io/2017/01/15/systemd-networkd-on-ubuntu-16-04-lts-xenial/</link><pubDate>Sun, 15 Jan 2017 15:24:40 +0000</pubDate><guid>https://major.io/2017/01/15/systemd-networkd-on-ubuntu-16-04-lts-xenial/</guid><description>My OpenStack cloud depends on Ubuntu, and the latest release of OpenStack-Ansible (what I use to deploy OpenStack) requires Ubuntu 16.04 at a minimum. I tried upgrading the servers in place from Ubuntu 14.04 to 16.04, but that didn&amp;rsquo;t work so well. Those servers wouldn&amp;rsquo;t boot and the only recourse was a re-install.
Once I finished re-installing them (and wrestling with several installer bugs in Ubuntu 16.04), it was time to set up networking.</description></item><item><title>Display auditd messages with journalctl</title><link>https://major.io/2017/01/05/display-auditd-messages-with-journalctl/</link><pubDate>Thu, 05 Jan 2017 15:53:13 +0000</pubDate><guid>https://major.io/2017/01/05/display-auditd-messages-with-journalctl/</guid><description>All systems running systemd come with a powerful tool for reviewing the system journal: journalctl. It allows you to get a quick look at the system journal while also allowing you to heavily customize your view of the log.
I logged into a server recently that was having a problem and I found that the audit logs weren&amp;rsquo;t going into syslog. That&amp;rsquo;s no problem - they&amp;rsquo;re in the system journal. The system journal was filled with tons of other messages, so I decided to limit the output only to messages from the auditd unit:</description></item><item><title>Preventing Ubuntu 16.04 from starting daemons when a package is installed</title><link>https://major.io/2016/05/05/preventing-ubuntu-16-04-starting-daemons-package-installed/</link><pubDate>Thu, 05 May 2016 15:54:27 +0000</pubDate><guid>https://major.io/2016/05/05/preventing-ubuntu-16-04-starting-daemons-package-installed/</guid><description>I&amp;rsquo;ve gone on some mini-rants in other posts about starting daemons immediately after they&amp;rsquo;re installed in Ubuntu and Debian. Things are a little different in Ubuntu 16.04 and I thought it might be helpful to share some tips for that release.
Before we do that, let&amp;rsquo;s go over something. I still don&amp;rsquo;t understand why this is a common practice within Ubuntu and Debian.
Take a look at the postinst-systemd-start script within the init-systems-helpers package (source link):</description></item><item><title>Tinkering with systemdâ€™s predictable network names</title><link>https://major.io/2016/01/20/tinkering-with-systemds-predictable-network-names/</link><pubDate>Wed, 20 Jan 2016 19:46:52 +0000</pubDate><guid>https://major.io/2016/01/20/tinkering-with-systemds-predictable-network-names/</guid><description>I&amp;rsquo;ve talked about predictable network names (and seemingly unpredictable ones) on the blog before, but some readers asked me how they could alter the network naming to fit a particular situation. Oddly enough, my Supermicro 5028D-T4NT has a problem with predictable names and it&amp;rsquo;s a great example to use here.
The problem There&amp;rsquo;s plenty of detail in my post about the Supermicro 5028D-T4NT, but the basic gist is that something within the firmware is causing the all of the network cards in the server to show up as onboard.</description></item><item><title>GRE tunnels with systemd-networkd</title><link>https://major.io/2015/10/16/gre-tunnels-with-systemd-networkd/</link><pubDate>Fri, 16 Oct 2015 23:54:52 +0000</pubDate><guid>https://major.io/2015/10/16/gre-tunnels-with-systemd-networkd/</guid><description>Switching to systemd-networkd for managing your networking interfaces makes things quite a bit simpler over standard networking scripts or NetworkManager. Aside from being easier to configure, it uses fewer resources on your system, which can be handy for smaller virtual machines or containers.
Managing tunnels between interfaces is also easier with systemd-networkd. This post will show you how to set up a GRE tunnel between two hosts running systemd-networkd.
Getting started You&amp;rsquo;ll need two hosts running a recent version of systemd-networkd.</description></item><item><title>Customizing systemdâ€™s network device names</title><link>https://major.io/2015/09/28/customizing-systemds-network-device-names/</link><pubDate>Tue, 29 Sep 2015 02:08:22 +0000</pubDate><guid>https://major.io/2015/09/28/customizing-systemds-network-device-names/</guid><description>Earlier today, I wrote a post about my first thoughts on the Supermicro 5028D-T4NT server. The 10Gb interfaces on the server came up with the names eth0 and eth1. That wasn&amp;rsquo;t what I expected. There&amp;rsquo;s tons of detail on the problem in the blog post as well as the Github issue.
Kay Sievers gave a hint about how to adjust the interfacing naming in a more granular way than simply disabling the predictable network names.</description></item><item><title>First thoughts: Linux on the Supermicro 5028D-TN4T</title><link>https://major.io/2015/09/28/first-thoughts-linux-on-the-supermicro-5028d-t4nt/</link><pubDate>Mon, 28 Sep 2015 12:55:51 +0000</pubDate><guid>https://major.io/2015/09/28/first-thoughts-linux-on-the-supermicro-5028d-t4nt/</guid><description>I&amp;rsquo;ve recently moved over to Rackspace&amp;rsquo;s OpenStack Private Cloud team and the role is full of some great challenges. One of those challenges was figuring out a home lab for testing.
The search My first idea was to pick up some lower-power machines that would give me some infrastructure at a low price with a low power bill as well. I found some Dell Optiplex 3020&amp;rsquo;s on Newegg with Haswell i3&amp;rsquo;s that came in at a good price point.</description></item><item><title>systemd in Fedora 22: Failed to restart service: Access Denied</title><link>https://major.io/2015/09/18/systemd-in-fedora-22-failed-to-restart-service-access-denied/</link><pubDate>Fri, 18 Sep 2015 19:43:35 +0000</pubDate><guid>https://major.io/2015/09/18/systemd-in-fedora-22-failed-to-restart-service-access-denied/</guid><description>If you&amp;rsquo;re running Fedora 22 and you&amp;rsquo;ve recently updated to systemd-219-24.fc22, you might see errors like these:
# systemctl restart postfix Failed to restart postfix.service: Access denied Your audit logs will have entries like these:
type=USER_AVC msg=audit(1442602150.292:763): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='avc: denied { start } for auid=n/a uid=0 gid=0 path=&amp;quot;/run/systemd/system/session-4.scope&amp;quot; cmdline=&amp;quot;/usr/lib/systemd/systemd-logind&amp;quot; scontext=system_u:system_r:systemd_logind_t:s0 tcontext=system_u:object_r:systemd_unit_file_t:s0 tclass=service exe=&amp;quot;/usr/lib/systemd/systemd&amp;quot; sauid=0 hostname=? addr=? terminal=?' type=USER_AVC msg=audit(1442602150.437:768): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='avc: denied { start } for auid=n/a uid=0 gid=0 path=&amp;quot;/usr/lib/systemd/system/user@.</description></item><item><title>Build a network router and firewall with Fedora 22 and systemd-networkd</title><link>https://major.io/2015/08/27/build-a-network-router-and-firewall-with-fedora-22-and-systemd-networkd/</link><pubDate>Thu, 27 Aug 2015 12:38:43 +0000</pubDate><guid>https://major.io/2015/08/27/build-a-network-router-and-firewall-with-fedora-22-and-systemd-networkd/</guid><description>This post originally appeared on the Fedora Magazine blog.
One of my favorite features of Fedora 22 is systemd-networkd and all of the new features that came with it in recent systemd versions. The configuration files are easy to read, bridging is simple, and tunnels are resilient.
I&amp;rsquo;ve recently started using a small Linux server at home again as a network router and firewall. However, I used systemd-networkd this time and had some great results.</description></item><item><title>Understanding systemdâ€™s predictable network device names</title><link>https://major.io/2015/08/21/understanding-systemds-predictable-network-device-names/</link><pubDate>Fri, 21 Aug 2015 21:15:36 +0000</pubDate><guid>https://major.io/2015/08/21/understanding-systemds-predictable-network-device-names/</guid><description>I talked a bit about systemd&amp;rsquo;s network device name in my earlier post about systemd-networkd and bonding and I received some questions about how systemd rolls through the possible names of network devices to choose the final name. These predictable network device names threw me a curveball last summer when I couldn&amp;rsquo;t figure out how the names were constructed.
Let&amp;rsquo;s walk through this process.
What&amp;rsquo;s in a name? Back in the systemd-networkd bonding post, I dug into a dual port Intel network card that showed up in a hotplug slot:</description></item><item><title>Using systemd-networkd with bonding on Rackspaceâ€™s OnMetal servers</title><link>https://major.io/2015/08/21/using-systemd-networkd-with-bonding-on-rackspaces-onmetal-servers/</link><pubDate>Fri, 21 Aug 2015 14:00:46 +0000</pubDate><guid>https://major.io/2015/08/21/using-systemd-networkd-with-bonding-on-rackspaces-onmetal-servers/</guid><description>I&amp;rsquo;ve written about systemd-networkd in the past and how easy it can be to set up new network devices and tunnels. However, the documentation on systemd-networkd with bonding is a bit lacking (but I have a pull request pending for that).
Rackspace&amp;rsquo;s OnMetal Servers are a good place to test since they have bonded networks configured by default. They&amp;rsquo;re also quite fast and always fun for experiments.
To get started, head on over to the Rackspace Cloud control panel and build a compute-1 OnMetal server and choose Fedora 22 as your operating system.</description></item><item><title>Very slow ssh logins on Fedora 22</title><link>https://major.io/2015/07/27/very-slow-ssh-logins-on-fedora-22/</link><pubDate>Mon, 27 Jul 2015 12:09:44 +0000</pubDate><guid>https://major.io/2015/07/27/very-slow-ssh-logins-on-fedora-22/</guid><description>I&amp;rsquo;ve recently set up a Fedora 22 firewall/router at home (more on that later) and I noticed that remote ssh logins were extremely slow. In addition, sudo commands seemed to stall out for the same amount of time (about 25-30 seconds).
I&amp;rsquo;ve done all the basic troubleshooting already:
Switch to UseDNS no in /etc/ssh/sshd_config Set GSSAPIAuthentication no in /etc/ssh/sshd_config Tested DNS resolution These lines kept cropping up in my system journal when I tried to access the server using ssh:</description></item><item><title>Fedora 22 and rotating GNOME wallpaper with systemd timers</title><link>https://major.io/2015/06/23/fedora-22-and-rotating-gnome-wallpaper-with-systemd-timers/</link><pubDate>Tue, 23 Jun 2015 17:25:02 +0000</pubDate><guid>https://major.io/2015/06/23/fedora-22-and-rotating-gnome-wallpaper-with-systemd-timers/</guid><description>My older post about rotating GNOME&amp;rsquo;s wallpaper with systemd timers doesn&amp;rsquo;t seem to work in Fedora 22. The DISPLAY=:0 environment variable isn&amp;rsquo;t sufficient to allow systemd to use gsettings.
Instead, the script run by the systemd timer must know a little bit more about dbus. More specifically, the script needs to know the address of the dbus session so it can communicate on the bus. That&amp;rsquo;s normally kept within the DBUS_SESSION_BUS_ADDRESS environment variable.</description></item><item><title>Automatic package updates with dnf</title><link>https://major.io/2015/05/11/automatic-package-updates-with-dnf/</link><pubDate>Tue, 12 May 2015 01:22:10 +0000</pubDate><guid>https://major.io/2015/05/11/automatic-package-updates-with-dnf/</guid><description>With Fedora 22&amp;rsquo;s release date quickly approaching, it&amp;rsquo;s time to familiarize yourself with dnf. It&amp;rsquo;s especially important since clean installs of Fedora 22 won&amp;rsquo;t have yum.
Almost all of the command line arguments are the same but automated updates are a little different. If you&amp;rsquo;re used to yum-updatesd, then you&amp;rsquo;ll want to look into dnf-automatic.
Installation Getting the python code and systemd unit files for automated dnf updates is a quick process:</description></item><item><title>Creating a bridge for virtual machines using systemd-networkd</title><link>https://major.io/2015/03/26/creating-a-bridge-for-virtual-machines-using-systemd-networkd/</link><pubDate>Thu, 26 Mar 2015 13:17:08 +0000</pubDate><guid>https://major.io/2015/03/26/creating-a-bridge-for-virtual-machines-using-systemd-networkd/</guid><description>There are plenty of guides out there for making ethernet bridges in Linux to support virtual machines using built-in network scripts or NetworkManager. I decided to try my hand with creating a bridge using only systemd-networkd and it was surprisingly easy.
First off, you&amp;rsquo;ll need a version of systemd with networkd support. Fedora 20 and 21 will work just fine. RHEL/CentOS 7 and Arch Linux should also work. Much of the networkd support has been in systemd for quite a while, but if you&amp;rsquo;re looking for fancier network settings, like bonding, you&amp;rsquo;ll want at least systemd 216.</description></item><item><title>Rotate GNOME 3â€™s wallpaper with systemd user units and timers</title><link>https://major.io/2015/02/11/rotate-gnome-3s-wallpaper-systemd-user-units-timers/</link><pubDate>Wed, 11 Feb 2015 14:23:03 +0000</pubDate><guid>https://major.io/2015/02/11/rotate-gnome-3s-wallpaper-systemd-user-units-timers/</guid><description>NOTE: This works in Fedora 21, but not in Fedora 22. Review this post for the fixes.
GNOME 3 has improved by leaps and bounds since its original release and it&amp;rsquo;s my daily driver window manager on my Linux laptop. Even with all of these improvements, there&amp;rsquo;s still no built-in way to rotate wallpaper (that I&amp;rsquo;ve found).
There are some extensions, like BackSlide, that enable background rotation on a time interval.</description></item><item><title>Unexpected predictable network naming with systemd</title><link>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</link><pubDate>Wed, 06 Aug 2014 21:09:34 +0000</pubDate><guid>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</guid><description>While using a Dell R720 at work today, we stumbled upon a problem where the predictable network device naming with systemd gave us some unpredictable results. The server has four onboard network ports (two 10GbE and two 1GbE) and an add-on 10GbE card with two additional ports.
Running lspci gives this output:
# lspci | grep Eth 01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 08:00.</description></item><item><title>Switching to systemd on Debian jessie</title><link>https://major.io/2014/05/20/switching-to-systemd-on-debian-jessie/</link><pubDate>Tue, 20 May 2014 13:47:33 +0000</pubDate><guid>https://major.io/2014/05/20/switching-to-systemd-on-debian-jessie/</guid><description>It seems like everyone is embracing systemd these days. It&amp;rsquo;s been in Fedora since 2011 and it&amp;rsquo;s already in the RHEL 7 release candidate. Arch Linux and Gentoo have it as well. Debian got on board with the jessie release (which is currently in testing).
Switching from old SysVinit to systemd in Debian jessie is quite simple. For the extremely cautious system administrators, you can follow Debian&amp;rsquo;s guide and test systemd before you make the full cutover.</description></item><item><title>Receive e-mail reports for SELinux AVC denials</title><link>https://major.io/2011/09/15/receive-e-mail-reports-for-selinux-avc-denials/</link><pubDate>Fri, 16 Sep 2011 04:17:04 +0000</pubDate><guid>https://major.io/2011/09/15/receive-e-mail-reports-for-selinux-avc-denials/</guid><description>SELinux isn&amp;rsquo;t a technology that&amp;rsquo;s easy to tackle for newcomers. However, there&amp;rsquo;s been a lot of work to smooth out the rough edges while still keeping a tight grip on what applications and users are allowed to do on a Linux system. One of the biggest efforts has been around setroubleshoot.
The purpose behind setroubleshoot is to let users know when access has been denied, help them resolve it if necessary, and to reduce overall frustration while working through tight security restrictions in the default SELinux policies.</description></item></channel></rss>