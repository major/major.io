<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ssh on Major Hayden's Blog ü§†</title><link>https://major.io/tags/ssh/</link><description>Recent content in ssh on Major Hayden's Blog ü§†</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 27 Jul 2015 12:09:44 +0000</lastBuildDate><atom:link href="https://major.io/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>Very slow ssh logins on Fedora 22</title><link>https://major.io/2015/07/27/very-slow-ssh-logins-on-fedora-22/</link><pubDate>Mon, 27 Jul 2015 12:09:44 +0000</pubDate><guid>https://major.io/2015/07/27/very-slow-ssh-logins-on-fedora-22/</guid><description>I&amp;rsquo;ve recently set up a Fedora 22 firewall/router at home (more on that later) and I noticed that remote ssh logins were extremely slow. In addition, sudo commands seemed to stall out for the same amount of time (about 25-30 seconds).
I&amp;rsquo;ve done all the basic troubleshooting already:
Switch to UseDNS no in /etc/ssh/sshd_config Set GSSAPIAuthentication no in /etc/ssh/sshd_config Tested DNS resolution These lines kept cropping up in my system journal when I tried to access the server using ssh:</description></item><item><title>X11 forwarding request failed on channel 0</title><link>https://major.io/2014/07/24/x11-forwarding-request-failed-on-channel-0/</link><pubDate>Thu, 24 Jul 2014 19:24:32 +0000</pubDate><guid>https://major.io/2014/07/24/x11-forwarding-request-failed-on-channel-0/</guid><description>Forwarding X over ssh is normally fairly straightforward when you have the correct packages installed. I have another post about the errors that appear when you&amp;rsquo;re missing the xorg-x11-xauth (CentOS, Fedora, RHEL) or xauth (Debian, Ubuntu) packages.
Today&amp;rsquo;s error was a bit different. Each time I accessed a particular Debian server via ssh with X forwarding requested, I saw this:
$ ssh -YC myserver.example.com X11 forwarding request failed on channel 0 The xauth package was installed and I found a .</description></item><item><title>PXE boot Fedora 19 using a Mikrotik firewall</title><link>https://major.io/2013/07/23/pxe-boot-fedora-19-using-a-mikrotik-firewall/</link><pubDate>Tue, 23 Jul 2013 21:47:33 +0000</pubDate><guid>https://major.io/2013/07/23/pxe-boot-fedora-19-using-a-mikrotik-firewall/</guid><description>Outside of the RHCA exams, I haven&amp;rsquo;t configured a PXE system for my personal needs. A colleague demoed his PXE setup for me and I was hooked. Once I realized how much time I could save when I&amp;rsquo;m building and tearing down virtual machines, it made complete sense. This post will show you how to configure PXE and tftpd in Mikrotik&amp;rsquo;s RouterOS to boot and install Fedora 19 (as well as provide rescue environments).</description></item><item><title>Changing your ssh server‚Äôs port from the default: Is it worth it?</title><link>https://major.io/2013/05/14/changing-your-ssh-servers-port-from-the-default-is-it-worth-it/</link><pubDate>Wed, 15 May 2013 04:43:41 +0000</pubDate><guid>https://major.io/2013/05/14/changing-your-ssh-servers-port-from-the-default-is-it-worth-it/</guid><description>Changing my ssh port from the default port (22) has been one of my standard processes for quite some time when I build new servers or virtual machines. However, I see arguments crop up regularly about it (like this reddit thread or this other one).
Before I go any further, let&amp;rsquo;s settle the &amp;ldquo;security through obscurity&amp;rdquo; argument. (This could probably turn into its own post but I&amp;rsquo;ll be brief for now.</description></item><item><title>virt-manager won‚Äôt release the mouse when using ssh forwarding from OS X</title><link>https://major.io/2013/03/20/virt-manager-wont-release-the-mouse-when-using-ssh-forwarding-from-os-x/</link><pubDate>Wed, 20 Mar 2013 05:26:56 +0000</pubDate><guid>https://major.io/2013/03/20/virt-manager-wont-release-the-mouse-when-using-ssh-forwarding-from-os-x/</guid><description>The latest versions of virt-manager don&amp;rsquo;t release the mouse pointer when you&amp;rsquo;re doing X forwarding to a machine running OS X. This can lead to a rather frustrating user experience since your mouse pointer is totally stuck in the window. Although this didn&amp;rsquo;t affect me with CentOS 6 hosts, Fedora 18 hosts were a problem.
There&amp;rsquo;s a relatively elegant fix from btm.geek that solved it for me. On your Mac, exit X11/Xquartz and create an ~/.</description></item><item><title>X forwarding over ssh woes: DISPLAY is not set</title><link>https://major.io/2012/07/14/x-forwarding-over-ssh-woes-display-is-not-set/</link><pubDate>Sat, 14 Jul 2012 19:56:09 +0000</pubDate><guid>https://major.io/2012/07/14/x-forwarding-over-ssh-woes-display-is-not-set/</guid><description>This problem came up in conversation earlier this week and I realized that I&amp;rsquo;d never written a post about it. Has this ever happened to you before?
$ ssh -YC remotebox [major@remotebox ~]$ xterm xterm: Xt error: Can't open display: xterm: DISPLAY is not set I&amp;rsquo;ve scratched my head on this error message when the remote server is a minimally-installed CentOS, Fedora, or Red Hat system. It turns out that the xorg-x11-xauth package wasn&amp;rsquo;t installed with the minimal package set and I didn&amp;rsquo;t have any authentication credentials ready to hand off to the X server on the remote machine.</description></item><item><title>The Kerberos-hater‚Äôs guide to installing Kerberos</title><link>https://major.io/2012/02/05/the-kerberos-haters-guide-to-installing-kerberos/</link><pubDate>Sun, 05 Feb 2012 21:03:52 +0000</pubDate><guid>https://major.io/2012/02/05/the-kerberos-haters-guide-to-installing-kerberos/</guid><description>As promised in my earlier post entitled Kerberos for haters, I&amp;rsquo;ve assembled the simplest possible guide to get Kerberos up an running on two CentOS 5 servers.
Also, I don&amp;rsquo;t really hate Kerberos. It&amp;rsquo;s a bit of an inside joke with my coworkers who are studying for some of the RHCA exams at Rackspace. The additional security provided by Kerberos is quite good but the setup involves a lot of small steps.</description></item><item><title>Kerberos for haters</title><link>https://major.io/2012/02/02/kerberos-for-haters/</link><pubDate>Fri, 03 Feb 2012 04:29:32 +0000</pubDate><guid>https://major.io/2012/02/02/kerberos-for-haters/</guid><description>I&amp;rsquo;ll be the first one to admit that Kerberos drives me a little insane. It&amp;rsquo;s a requirement for two of the exams in Red Hat&amp;rsquo;s RHCA certification track and I&amp;rsquo;ve been forced to learn it. It provides some pretty nice security features for large server environments. You get central single sign ons, encrypted authentication, and bidirectional validation. However, getting it configured can be a real pain due to some rather archaic commands and shells.</description></item><item><title>Receive e-mail reports for SELinux AVC denials</title><link>https://major.io/2011/09/15/receive-e-mail-reports-for-selinux-avc-denials/</link><pubDate>Fri, 16 Sep 2011 04:17:04 +0000</pubDate><guid>https://major.io/2011/09/15/receive-e-mail-reports-for-selinux-avc-denials/</guid><description>SELinux isn&amp;rsquo;t a technology that&amp;rsquo;s easy to tackle for newcomers. However, there&amp;rsquo;s been a lot of work to smooth out the rough edges while still keeping a tight grip on what applications and users are allowed to do on a Linux system. One of the biggest efforts has been around setroubleshoot.
The purpose behind setroubleshoot is to let users know when access has been denied, help them resolve it if necessary, and to reduce overall frustration while working through tight security restrictions in the default SELinux policies.</description></item><item><title>Securing your ssh server</title><link>https://major.io/2010/10/12/securing-your-ssh-server/</link><pubDate>Tue, 12 Oct 2010 22:39:15 +0000</pubDate><guid>https://major.io/2010/10/12/securing-your-ssh-server/</guid><description>One of the most common questions that I see in my favorite IRC channel is: ‚ÄúHow can I secure sshd on my server?‚Äù There&amp;rsquo;s no single right answer, but most systems administrators combine multiple techniques to provide as much security as possible with the least inconvenience to the end user.
Here are my favorite techniques listed from most effective to least effective:
SSH key pairs
By disabling password-based authentication and requiring ssh key pairs, you reduce the chances of compromise via a brute force attack.</description></item><item><title>Crash course in dsh</title><link>https://major.io/2010/01/20/crash-course-in-dsh/</link><pubDate>Wed, 20 Jan 2010 14:47:56 +0000</pubDate><guid>https://major.io/2010/01/20/crash-course-in-dsh/</guid><description>Thanks to a recommendation from [Michael][1] and [Florian][2], I&amp;rsquo;ve been using [dsh][3] with a lot of success for quite some time. In short, dsh is a small application which will allow you to run commands across many servers via ssh very quickly.
You may be wondering: &amp;ldquo;Why not just use ssh in a for loop?&amp;rdquo; Sure, you could do something like this in bash:
But dsh allows you to do this: In addition, dsh allows you to run the commands concurrently (-c) or one after the other (-w).</description></item><item><title>Fix MacFusion on Snow Leopard</title><link>https://major.io/2009/08/28/fix-macfusion-on-snow-leopard/</link><pubDate>Fri, 28 Aug 2009 16:21:23 +0000</pubDate><guid>https://major.io/2009/08/28/fix-macfusion-on-snow-leopard/</guid><description>Running OS X 10.6.3? William Fennie found a fix on Google Groups.
First off, credit for this fix on OS X 10.6.2 goes to Geoff Watts from his two tweets.
If you&amp;rsquo;re using Snow Leopard, you&amp;rsquo;ll find that the current version of MacFusion refuses to complete a connection to a remote server. You can fix this in two steps:
First, quit MacFusion.
Second, open System Preferences and then open the MacFUSE pane.</description></item><item><title>Simple SOCKS proxy using SSH</title><link>https://major.io/2009/05/26/simple-socks-proxy-using-ssh/</link><pubDate>Tue, 26 May 2009 19:29:55 +0000</pubDate><guid>https://major.io/2009/05/26/simple-socks-proxy-using-ssh/</guid><description>Sometimes we find ourselves in places where we don&amp;rsquo;t trust the network that we&amp;rsquo;re using. I&amp;rsquo;ve found myself in quite a few situations where I know my data is being encrypted, but I want an additional layer of protection. Luckily, that protection is built into SSH if you&amp;rsquo;d like to use it.
Create a simple SOCKS proxy with SSH by using the -D flag:
That command will open up a SOCKS proxy on your workstation on port 2400.</description></item></channel></rss>