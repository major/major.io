<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>centos on Major Hayden ü§†</title><link>https://major.io/tags/centos/</link><description>Recent content in centos on Major Hayden ü§†</description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/" target="_blank" rel="noopener">CC BY-SA 2.0&lt;/a></copyright><lastBuildDate>Fri, 04 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://major.io/tags/centos/index.xml" rel="self" type="application/rss+xml"/><item><title>Allow a port range with firewalld</title><link>https://major.io/2019/01/04/allow-port-range-with-firewalld/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://major.io/2019/01/04/allow-port-range-with-firewalld/</guid><description>Managing iptables gets a lot easier with firewalld. You can manage rules for the IPv4 and IPv6 stacks using the same commands and it provides fine-grained controls for various &amp;ldquo;zones&amp;rdquo; of network sources and destinations.
Quick example Here&amp;rsquo;s an example of allowing an arbitrary port (for netdata) through the firewall with iptables and firewalld on Fedora:
## iptables iptables -A INPUT -j ACCEPT -p tcp --dport 19999 ip6tables -A INPUT -j ACCEPT -p tcp --dport 19999 service iptables save service ip6tables save ## firewalld firewall-cmd --add-port=19999/tcp --permanent In this example, firewall-cmd allows us to allow a TCP port through the firewall with a much simpler interface and the change is made permanent with the --permanent argument.</description></item><item><title>Install testing kernels in Fedora</title><link>https://major.io/2018/02/28/install-testing-kernels-in-fedora/</link><pubDate>Wed, 28 Feb 2018 13:53:48 +0000</pubDate><guid>https://major.io/2018/02/28/install-testing-kernels-in-fedora/</guid><description>If you&amp;rsquo;re on the latest Fedora release, you&amp;rsquo;re already running lots of modern packages. However, there are those times when you may want to help with testing efforts or try out a new feature in a newer package.
Most of my systems have the updates-testing repository enabled in one way or another. This repository contains packages that package maintainers have submitted to become the next stable package in Fedora. For example, if there is a bug fix for nginx, the package maintainer submits the changes and publish a release.</description></item><item><title>Ensuring keepalived starts after the network is ready</title><link>https://major.io/2017/12/15/ensuring-keepalived-starts-network-ready/</link><pubDate>Fri, 15 Dec 2017 21:18:37 +0000</pubDate><guid>https://major.io/2017/12/15/ensuring-keepalived-starts-network-ready/</guid><description>After a recent OpenStack-Ansible (OSA) deployment on CentOS, I found that keepalived was not starting properly at boot time:
Keepalived_vrrp[801]: Cant find interface br-mgmt for vrrp_instance internal !!! Keepalived_vrrp[801]: Truncating auth_pass to 8 characters Keepalived_vrrp[801]: VRRP is trying to assign ip address 172.29.236.11/32 to unknown br-mgmt interface !!! go out and fix your conf !!! Keepalived_vrrp[801]: Cant find interface br-mgmt for vrrp_instance external !!! Keepalived_vrrp[801]: Truncating auth_pass to 8 characters Keepalived_vrrp[801]: VRRP is trying to assign ip address 192.</description></item><item><title>Changes in RHEL 7 Security Technical Implementation Guide Version 1, Release 3</title><link>https://major.io/2017/11/02/changes-in-rhel-7-security-technical-implementation-guide-version-1-release-3/</link><pubDate>Thu, 02 Nov 2017 15:00:25 +0000</pubDate><guid>https://major.io/2017/11/02/changes-in-rhel-7-security-technical-implementation-guide-version-1-release-3/</guid><description>The latest release of the Red Hat Enterprise Linux Security Technical Implementation Guide (STIG) was published last week. This release is Version 1, Release 3, and it contains four main changes:
V-77819 - Multifactor authentication is required for graphical logins V-77821 - Datagram Congestion Control Protocol (DCCP) kernel module must be disabled V-77823 - Single user mode must require user authentication V-77825 - Address space layout randomization (ASLR) must be enabled Deep dive Let&amp;rsquo;s break down this list to understand what each one means.</description></item><item><title>Import RPM repository GPG keys from other keyservers temporarily</title><link>https://major.io/2017/09/20/import-rpm-repository-keys-from-other-keyservers-temporarily/</link><pubDate>Wed, 20 Sep 2017 15:24:13 +0000</pubDate><guid>https://major.io/2017/09/20/import-rpm-repository-keys-from-other-keyservers-temporarily/</guid><description>I&amp;rsquo;ve been working through some patches to OpenStack-Ansible lately to optimize how we configure yum repositories in our deployments. During that work, I ran into some issues where pgp.mit.edu was returning 500 errors for some requests to retrieve GPG keys.
Ansible was returning this error:
curl: (22) The requested URL returned error: 502 Proxy Error error: http://pgp.mit.edu:11371/pks/lookup?op=get&amp;amp;search=0x61E8806C: import read failed(2) How does the rpm command know which keyserver to use? Let&amp;rsquo;s use the --showrc argument to show how it is configured:</description></item><item><title>RHEL 7 STIG v1 updates for openstack-ansible-security</title><link>https://major.io/2017/04/05/rhel-7-stig-v1-updates-for-openstack-ansible-security/</link><pubDate>Wed, 05 Apr 2017 17:46:17 +0000</pubDate><guid>https://major.io/2017/04/05/rhel-7-stig-v1-updates-for-openstack-ansible-security/</guid><description>DISA&amp;rsquo;s final release of the Red Hat Enterprise Linux (RHEL) 7 Security Technical Implementation Guide (STIG) came out a few weeks ago and it has plenty of improvements and changes. The openstack-ansible-security role has already been updated with these changes.
Quite a few duplicated STIG controls were removed and a few new ones were added. Some of the controls in the pre-release were difficult to implement, especially those that changed parameters for PKI-based authentication.</description></item><item><title>Display auditd messages with journalctl</title><link>https://major.io/2017/01/05/display-auditd-messages-with-journalctl/</link><pubDate>Thu, 05 Jan 2017 15:53:13 +0000</pubDate><guid>https://major.io/2017/01/05/display-auditd-messages-with-journalctl/</guid><description>All systems running systemd come with a powerful tool for reviewing the system journal: journalctl. It allows you to get a quick look at the system journal while also allowing you to heavily customize your view of the log.
I logged into a server recently that was having a problem and I found that the audit logs weren&amp;rsquo;t going into syslog. That&amp;rsquo;s no problem - they&amp;rsquo;re in the system journal. The system journal was filled with tons of other messages, so I decided to limit the output only to messages from the auditd unit:</description></item><item><title>augenrules fails with ‚Äúrule exists‚Äù when loading rules into auditd</title><link>https://major.io/2017/01/03/augenrules-fails-with-rule-exists-when-loading-rules-into-auditd/</link><pubDate>Tue, 03 Jan 2017 19:01:46 +0000</pubDate><guid>https://major.io/2017/01/03/augenrules-fails-with-rule-exists-when-loading-rules-into-auditd/</guid><description>When I came back from the holiday break, I found that the openstack-ansible-security role wasn&amp;rsquo;t passing tests any longer. The Ansible playbook stopped when augenrules ran to load the new audit rules. The error wasn&amp;rsquo;t terribly helpful:
/usr/sbin/augenrules: No change Error sending add rule data request (Rule exists) There was an error in line 5 of /etc/audit/audit.rules A duplicated rule? I&amp;rsquo;ve been working on lots of changes to implement the Red Hat Enterprise Linux 7 Security Technical Implementation Guide (STIG) and I assumed I put in the same rule twice with an errant copy and paste.</description></item><item><title>Automated security hardening with Ansible: May updates</title><link>https://major.io/2016/05/26/automated-security-hardening-with-ansible-may-updates/</link><pubDate>Fri, 27 May 2016 02:40:33 +0000</pubDate><guid>https://major.io/2016/05/26/automated-security-hardening-with-ansible-may-updates/</guid><description>Lots of work has gone into the openstack-ansible-security Ansible role since I delivered a talk about it last month at the OpenStack Summit in Austin. Attendees asked for quite a few new features and I&amp;rsquo;ve seen quite a few bug reports (and that&amp;rsquo;s a good thing).
Here&amp;rsquo;s a list of the newest additions since the Summit:
New features Ubuntu 16.04 LTS (Xenial) support The role now works with Ubuntu 16.04 and its newest features, including systemd.</description></item><item><title>Updating Dell PowerEdge BIOS from Linux</title><link>https://major.io/2016/01/18/updating-dell-poweredge-bios-from-linux/</link><pubDate>Mon, 18 Jan 2016 20:53:38 +0000</pubDate><guid>https://major.io/2016/01/18/updating-dell-poweredge-bios-from-linux/</guid><description>Updating Dell PowerEdge firmware from Linux is quite easy, but it isn&amp;rsquo;t documented very well. I ended up with a set of PowerEdge R710&amp;rsquo;s at work for a lab environment and the BIOS versions were different on each server.
Downloading the latest firmware Start by heading over to Dell&amp;rsquo;s support site and enter your system&amp;rsquo;s service tag. You can use lshw to find your service tag:
# lshw | head lab05 description: Rack Mount Chassis product: PowerEdge R710 () vendor: Dell Inc.</description></item><item><title>Chronicles of SELinux: Dealing with web content in unusual directories</title><link>https://major.io/2015/09/10/chronicles-of-selinux-dealing-with-web-content-in-unusual-directories/</link><pubDate>Thu, 10 Sep 2015 13:40:35 +0000</pubDate><guid>https://major.io/2015/09/10/chronicles-of-selinux-dealing-with-web-content-in-unusual-directories/</guid><description>I&amp;rsquo;ve decided to start a series of posts called &amp;ldquo;Chronicles of SELinux&amp;rdquo; where I hope to educate more users on how to handle SELinux denials with finesse rather than simply disabling it entirely. To kick things off, I&amp;rsquo;ll be talking about dealing with web content in the first post.
First steps If you&amp;rsquo;d like to follow along, simply hop onto a system running Fedora 21 (or later), CentOS 7 or Red Hat Enterprise Linux 7.</description></item><item><title>Understanding systemd‚Äôs predictable network device names</title><link>https://major.io/2015/08/21/understanding-systemds-predictable-network-device-names/</link><pubDate>Fri, 21 Aug 2015 21:15:36 +0000</pubDate><guid>https://major.io/2015/08/21/understanding-systemds-predictable-network-device-names/</guid><description>I talked a bit about systemd&amp;rsquo;s network device name in my earlier post about systemd-networkd and bonding and I received some questions about how systemd rolls through the possible names of network devices to choose the final name. These predictable network device names threw me a curveball last summer when I couldn&amp;rsquo;t figure out how the names were constructed.
Let&amp;rsquo;s walk through this process.
What&amp;rsquo;s in a name? Back in the systemd-networkd bonding post, I dug into a dual port Intel network card that showed up in a hotplug slot:</description></item><item><title>Research Paper: Securing Linux Containers</title><link>https://major.io/2015/08/14/research-paper-securing-linux-containers/</link><pubDate>Fri, 14 Aug 2015 20:45:50 +0000</pubDate><guid>https://major.io/2015/08/14/research-paper-securing-linux-containers/</guid><description>It seems like there&amp;rsquo;s a new way to run containers every week. The advantages and drawbacks of each approach are argued about on mailing lists, in IRC channels, and in person, around the world. However, the largest amount of confusion seems to be around security.
Launching secure containers I&amp;rsquo;ve written about launching secure containers on this blog many times before:
Launch secure LXC containers on Fedora 20 using SELinux and sVirt Improving LXC template security Try out LXC with an Ansible playbook CoreOS vs.</description></item><item><title>Automated testing for Ansible CIS playbook on RHEL/CentOS 6</title><link>https://major.io/2015/08/05/automated-testing-for-ansible-cis-playbook-on-rhelcentos-6/</link><pubDate>Wed, 05 Aug 2015 13:13:52 +0000</pubDate><guid>https://major.io/2015/08/05/automated-testing-for-ansible-cis-playbook-on-rhelcentos-6/</guid><description>I started working on the Ansible CIS playbook for CentOS and RHEL 6 back in 2014 and I&amp;rsquo;ve made a few changes to increase quality and make it easier to use.
First off, the role itself is no longer a submodule. You can now just clone the repository and get rolling. This should reduce the time it takes to get started.
Also, all pull requests to the repository now go through integration testing at Rackspace.</description></item><item><title>Allow new windows to steal focus in GNOME 3</title><link>https://major.io/2015/07/06/allow-new-windows-to-steal-focus-in-gnome-3/</link><pubDate>Mon, 06 Jul 2015 12:36:05 +0000</pubDate><guid>https://major.io/2015/07/06/allow-new-windows-to-steal-focus-in-gnome-3/</guid><description>GNOME 3 generally works well for me but it has some quirks. One of those quirks is that new windows don&amp;rsquo;t actually pop up on the screen with focus as they do in Windows and OS X. When opening a new window, you get a ‚Äú[Windowname] is ready‚Äù notification:
My preference is for new windows to pop in front and steal focus. I can see why that&amp;rsquo;s not the default since it might cause you to type something in another window where you weren&amp;rsquo;t expecting to.</description></item><item><title>Improving LXC template security</title><link>https://major.io/2015/06/18/improving-lxc-template-security/</link><pubDate>Thu, 18 Jun 2015 19:52:11 +0000</pubDate><guid>https://major.io/2015/06/18/improving-lxc-template-security/</guid><description>I&amp;rsquo;ve been getting involved with the Fedora Security Team lately and we&amp;rsquo;re working as a group to crush security bugs that affect Fedora, CentOS (via EPEL) and Red Hat Enterprise Linux (via EPEL). During some of this work, I stumbled upon a group of Red Hat Bugzilla tickets talking about LXC template security.
The gist of the problem is that there&amp;rsquo;s a wide variance in how users and user credentials are handled by the different LXC templates.</description></item><item><title>Keep old kernels with yum and dnf</title><link>https://major.io/2015/05/18/keep-old-kernels-with-yum-and-dnf/</link><pubDate>Mon, 18 May 2015 14:22:56 +0000</pubDate><guid>https://major.io/2015/05/18/keep-old-kernels-with-yum-and-dnf/</guid><description>When you upgrade packages on Red Hat, CentOS and Fedora systems, the newer package replaces the older package. That means that files managed by RPM from the old package are removed and replaced with files from the newer package.
There&amp;rsquo;s one exception here: kernel packages.
Upgrading a kernel package with yum and dnf leaves the older kernel package on the system just in case you need it again. This is handy if the new kernel introduces a bug on your system or if you need to work through a compile of a custom kernel module.</description></item><item><title>Creating a bridge for virtual machines using systemd-networkd</title><link>https://major.io/2015/03/26/creating-a-bridge-for-virtual-machines-using-systemd-networkd/</link><pubDate>Thu, 26 Mar 2015 13:17:08 +0000</pubDate><guid>https://major.io/2015/03/26/creating-a-bridge-for-virtual-machines-using-systemd-networkd/</guid><description>There are plenty of guides out there for making ethernet bridges in Linux to support virtual machines using built-in network scripts or NetworkManager. I decided to try my hand with creating a bridge using only systemd-networkd and it was surprisingly easy.
First off, you&amp;rsquo;ll need a version of systemd with networkd support. Fedora 20 and 21 will work just fine. RHEL/CentOS 7 and Arch Linux should also work. Much of the networkd support has been in systemd for quite a while, but if you&amp;rsquo;re looking for fancier network settings, like bonding, you&amp;rsquo;ll want at least systemd 216.</description></item><item><title>Install sysstat on Fedora 21</title><link>https://major.io/2014/12/12/install-sysstat-fedora-21/</link><pubDate>Fri, 12 Dec 2014 17:55:57 +0000</pubDate><guid>https://major.io/2014/12/12/install-sysstat-fedora-21/</guid><description>One of the first tools I learned about after working with Red Hat was sysstat. It can write down historical records about your server at regular intervals. This can help you diagnose CPU usage, RAM usage, or network usage problems. In addition, sysstat also provides some handy command line utilities like vmstat, iostat, and pidstat that give you a live view of what your system is doing.
On Debian-based systems (including Ubuntu), you install the sysstat package and enable it with a quick edit to /etc/default/sysstat and the cron job takes it from there.</description></item><item><title>Audit RHEL/CentOS 6 security benchmarks with ansible</title><link>https://major.io/2014/08/19/audit-rhelcentos-6-security-benchmarks-ansible/</link><pubDate>Tue, 19 Aug 2014 12:00:35 +0000</pubDate><guid>https://major.io/2014/08/19/audit-rhelcentos-6-security-benchmarks-ansible/</guid><description>Securing critical systems isn&amp;rsquo;t easy and that&amp;rsquo;s why security benchmarks exist. Many groups and communities distribute recommendations for securing servers, including NIST, the US Department of Defense (DoD), and the Center for Internet Security (CIS).
Although NIST and DoD are catching up quickly with newer OS releases, I&amp;rsquo;ve found that the CIS benchmarks are updated very regularly. CIS distributes auditing tools (with paid memberships) that require Java and they&amp;rsquo;re cumbersome to use, especially on servers where Java isn&amp;rsquo;t normally installed.</description></item><item><title>httpry 0.1.8 available for RHEL and CentOS 7</title><link>https://major.io/2014/08/13/httpry-rhel-centos-7/</link><pubDate>Wed, 13 Aug 2014 13:20:28 +0000</pubDate><guid>https://major.io/2014/08/13/httpry-rhel-centos-7/</guid><description>Red Hat Enterprise Linux and CentOS 7 users can now install httpry 0.1.8 in EPEL 7 Beta. The new httpry version is also available for RHEL/CentOS 6 and supported Fedora versions (19, 20, 21 branched, and rawhide).
Configuring EPEL on a RHEL/CentOS server is easy. Follow the instructions on EPEL&amp;rsquo;s site and install the epel-release RPM that matches your OS release version.
If you haven&amp;rsquo;t used httpry before, check the output on Jason Bittel&amp;rsquo;s site.</description></item><item><title>Unexpected predictable network naming with systemd</title><link>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</link><pubDate>Wed, 06 Aug 2014 21:09:34 +0000</pubDate><guid>https://major.io/2014/08/06/unexpected-predictable-network-naming-systemd/</guid><description>While using a Dell R720 at work today, we stumbled upon a problem where the predictable network device naming with systemd gave us some unpredictable results. The server has four onboard network ports (two 10GbE and two 1GbE) and an add-on 10GbE card with two additional ports.
Running lspci gives this output:
# lspci | grep Eth 01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01) 08:00.</description></item><item><title>Adventures in live booting Linux distributions</title><link>https://major.io/2014/07/29/adventures-in-live-booting-linux-distributions/</link><pubDate>Tue, 29 Jul 2014 13:05:54 +0000</pubDate><guid>https://major.io/2014/07/29/adventures-in-live-booting-linux-distributions/</guid><description>We&amp;rsquo;re all familiar with live booting Linux distributions. Almost every Linux distribution under the sun has a method for making live CD&amp;rsquo;s, writing live USB sticks, or booting live images over the network. The primary use case for some distributions is on a live medium (like KNOPPIX).
However, I embarked on an adventure to look at live booting Linux for a different use case. Sure, many live environments are used for demonstrations or installations - temporary activities for a desktop or a laptop.</description></item><item><title>Install Debian packages without starting daemons</title><link>https://major.io/2014/06/26/install-debian-packages-without-starting-daemons/</link><pubDate>Thu, 26 Jun 2014 20:39:44 +0000</pubDate><guid>https://major.io/2014/06/26/install-debian-packages-without-starting-daemons/</guid><description>My work at Rackspace has involved working with a bunch of Debian chroots lately. One problem I had was that daemons tried to start in the chroot as soon as I installed them. That created errors and made my ansible output look terrible.
If you&amp;rsquo;d like to prevent daemons from starting after installing a package, just toss a few lines into /usr/sbin/policy-rc.d:
cat &amp;gt; /usr/sbin/policy-rc.d &amp;lt;&amp;lt; EOF #!/bin/sh echo &amp;#34;All runlevel operations denied by policy&amp;#34; &amp;gt;&amp;amp;2 exit 101 EOF Now, install any packages that you need and the daemons will remain stopped until you start them (or reboot the server).</description></item><item><title>Performance benchmarks: KVM vs. Xen</title><link>https://major.io/2014/06/22/performance-benchmarks-kvm-vs-xen/</link><pubDate>Sun, 22 Jun 2014 17:00:14 +0000</pubDate><guid>https://major.io/2014/06/22/performance-benchmarks-kvm-vs-xen/</guid><description>After having some interesting discussions last week around KVM and Xen performance improvements over the past years, I decided to do a little research on my own. The last complete set of benchmarks I could find were from the Phoronix Haswell tests in 2013. There were some other benchmarks from 2011 but those were hotly debated due to the Xen patches headed into kernel 3.0.
The 2011 tests had a good list of benchmarks and I&amp;rsquo;ve done my best to replicate that list here three years later.</description></item></channel></rss>